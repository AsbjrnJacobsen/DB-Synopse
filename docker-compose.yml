services:
  orderservice:
    build:
      context: .
      dockerfile: OrderService/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    deploy:
      replicas: 2
    networks:
      - my_network
    depends_on:
      servicediscovery:
        condition: service_started
    
  inventoryservice:
    build:
      context: .
      dockerfile: InventoryService/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    deploy:
      replicas: 2
    networks:
      - my_network
    depends_on:
      servicediscovery:
        condition: service_started
      
  loadbalancer:
    ports:
      - 8086:8086
    build:
      context: .
      dockerfile: LoadBalancer/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    networks:
      - my_network
      - default
  
  servicediscovery:
    build:
      context: .
      dockerfile: ServiceDiscovery/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    networks:
      - my_network
    depends_on:
      loadbalancer:
        condition: service_started

  order-db:
      image: mcr.microsoft.com/mssql/server:2022-latest
      environment:
        MSSQL_SA_PASSWORD: "SuperSecret7!"
        ACCEPT_EULA: "Y"
      volumes:
        - mssql-order:/var/opt/mssql
      networks:
        - my_network
      healthcheck:
        test: ["CMD-SHELL", "pgrep sqlservr"]
        interval: 10s
        retries: 1
        start_period: 60s
        timeout: 5s

  migration_service:
    build:
      context: .
      dockerfile: OrderService/Migrations.Dockerfile
    networks:
      - my_network
      - default
    depends_on:
      order-db:
        condition: service_healthy

volumes:
  mssql-order:

networks:
  my_network:
    driver: bridge
services:
  mongo:
    image: "mongo:latest"
    container_name: mongodb
    restart: always
    environment:
      MONGODB_INITDB_ROOT_USERNAME: root # Define the root username
      MONGODB_INITDB_ROOT_PASSWORD: example123 # Define the root password
    ports:
      - "27017:27017" # Expose MongoDB on port 27017 to your host machine
    networks: # Add the network definition
      - my-network
    volumes:
      - mongo_data:/data/db # Persist MongoDB data to a Docker volume

  orderservice:
    build:
      context: .
      dockerfile: OrderService/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    deploy:
      replicas: 2
    networks:
      - my_network
    depends_on:
      servicediscovery:
        condition: service_started

  inventoryservice:
    # ports:
    #   - 8083:8083
    build:
      context: .
      dockerfile: InventoryService/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    deploy:
      replicas: 2
    networks:
      - my_network
      # - default
    depends_on:
      servicediscovery:
        condition: service_started
      # mongo:
      #   condition: service_healthy

  loadbalancer:
    ports:
      - 8086:8086
    build:
      context: .
      dockerfile: LoadBalancer/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    networks:
      - my_network
      - default

  servicediscovery:
    build:
      context: .
      dockerfile: ServiceDiscovery/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    networks:
      - my_network
    depends_on:
      loadbalancer:
        condition: service_started

networks:
  my_network:
    driver: bridge

volumes:
  mongo_data:
